// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: io/raw/a_rpc.proto

package raw

import (
	context "context"

	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RawClient is the client API for Raw service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RawClient interface {
	CreatePassProject(ctx context.Context, in *PassProject, opts ...grpc.CallOption) (*io.Id, error)
	UpdatePassProject(ctx context.Context, in *PassProject, opts ...grpc.CallOption) (*PassProject, error)
	GetPassProject(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*PassProject, error)
	CopyPassProject(ctx context.Context, in *PassProjectCopyRequest, opts ...grpc.CallOption) (*io.Id, error)
	DeletePassProject(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreatePass(ctx context.Context, in *Pass, opts ...grpc.CallOption) (*io.Id, error)
	UpdatePass(ctx context.Context, in *Pass, opts ...grpc.CallOption) (*io.Id, error)
	StreamPassUpdates(ctx context.Context, opts ...grpc.CallOption) (Raw_StreamPassUpdatesClient, error)
	GetPassById(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Pass, error)
	GetPassByExternalId(ctx context.Context, in *PassRecordByExternalIdRequest, opts ...grpc.CallOption) (*Pass, error)
	DeletePass(ctx context.Context, in *Pass, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListPassesByPassProject(ctx context.Context, in *ListPassesByPassProjectRequest, opts ...grpc.CallOption) (Raw_ListPassesByPassProjectClient, error)
	ListPassesByPassTemplate(ctx context.Context, in *ListPassesByPassTemplateRequest, opts ...grpc.CallOption) (Raw_ListPassesByPassTemplateClient, error)
}

type rawClient struct {
	cc grpc.ClientConnInterface
}

func NewRawClient(cc grpc.ClientConnInterface) RawClient {
	return &rawClient{cc}
}

func (c *rawClient) CreatePassProject(ctx context.Context, in *PassProject, opts ...grpc.CallOption) (*io.Id, error) {
	out := new(io.Id)
	err := c.cc.Invoke(ctx, "/raw.Raw/createPassProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawClient) UpdatePassProject(ctx context.Context, in *PassProject, opts ...grpc.CallOption) (*PassProject, error) {
	out := new(PassProject)
	err := c.cc.Invoke(ctx, "/raw.Raw/updatePassProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawClient) GetPassProject(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*PassProject, error) {
	out := new(PassProject)
	err := c.cc.Invoke(ctx, "/raw.Raw/getPassProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawClient) CopyPassProject(ctx context.Context, in *PassProjectCopyRequest, opts ...grpc.CallOption) (*io.Id, error) {
	out := new(io.Id)
	err := c.cc.Invoke(ctx, "/raw.Raw/copyPassProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawClient) DeletePassProject(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/raw.Raw/deletePassProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawClient) CreatePass(ctx context.Context, in *Pass, opts ...grpc.CallOption) (*io.Id, error) {
	out := new(io.Id)
	err := c.cc.Invoke(ctx, "/raw.Raw/createPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawClient) UpdatePass(ctx context.Context, in *Pass, opts ...grpc.CallOption) (*io.Id, error) {
	out := new(io.Id)
	err := c.cc.Invoke(ctx, "/raw.Raw/updatePass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawClient) StreamPassUpdates(ctx context.Context, opts ...grpc.CallOption) (Raw_StreamPassUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Raw_ServiceDesc.Streams[0], "/raw.Raw/streamPassUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &rawStreamPassUpdatesClient{stream}
	return x, nil
}

type Raw_StreamPassUpdatesClient interface {
	Send(*Pass) error
	Recv() (*io.Id, error)
	grpc.ClientStream
}

type rawStreamPassUpdatesClient struct {
	grpc.ClientStream
}

func (x *rawStreamPassUpdatesClient) Send(m *Pass) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rawStreamPassUpdatesClient) Recv() (*io.Id, error) {
	m := new(io.Id)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rawClient) GetPassById(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Pass, error) {
	out := new(Pass)
	err := c.cc.Invoke(ctx, "/raw.Raw/getPassById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawClient) GetPassByExternalId(ctx context.Context, in *PassRecordByExternalIdRequest, opts ...grpc.CallOption) (*Pass, error) {
	out := new(Pass)
	err := c.cc.Invoke(ctx, "/raw.Raw/getPassByExternalId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawClient) DeletePass(ctx context.Context, in *Pass, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/raw.Raw/deletePass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawClient) ListPassesByPassProject(ctx context.Context, in *ListPassesByPassProjectRequest, opts ...grpc.CallOption) (Raw_ListPassesByPassProjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Raw_ServiceDesc.Streams[1], "/raw.Raw/listPassesByPassProject", opts...)
	if err != nil {
		return nil, err
	}
	x := &rawListPassesByPassProjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Raw_ListPassesByPassProjectClient interface {
	Recv() (*Pass, error)
	grpc.ClientStream
}

type rawListPassesByPassProjectClient struct {
	grpc.ClientStream
}

func (x *rawListPassesByPassProjectClient) Recv() (*Pass, error) {
	m := new(Pass)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rawClient) ListPassesByPassTemplate(ctx context.Context, in *ListPassesByPassTemplateRequest, opts ...grpc.CallOption) (Raw_ListPassesByPassTemplateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Raw_ServiceDesc.Streams[2], "/raw.Raw/listPassesByPassTemplate", opts...)
	if err != nil {
		return nil, err
	}
	x := &rawListPassesByPassTemplateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Raw_ListPassesByPassTemplateClient interface {
	Recv() (*Pass, error)
	grpc.ClientStream
}

type rawListPassesByPassTemplateClient struct {
	grpc.ClientStream
}

func (x *rawListPassesByPassTemplateClient) Recv() (*Pass, error) {
	m := new(Pass)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RawServer is the server API for Raw service.
// All implementations should embed UnimplementedRawServer
// for forward compatibility
type RawServer interface {
	CreatePassProject(context.Context, *PassProject) (*io.Id, error)
	UpdatePassProject(context.Context, *PassProject) (*PassProject, error)
	GetPassProject(context.Context, *io.Id) (*PassProject, error)
	CopyPassProject(context.Context, *PassProjectCopyRequest) (*io.Id, error)
	DeletePassProject(context.Context, *io.Id) (*emptypb.Empty, error)
	CreatePass(context.Context, *Pass) (*io.Id, error)
	UpdatePass(context.Context, *Pass) (*io.Id, error)
	StreamPassUpdates(Raw_StreamPassUpdatesServer) error
	GetPassById(context.Context, *io.Id) (*Pass, error)
	GetPassByExternalId(context.Context, *PassRecordByExternalIdRequest) (*Pass, error)
	DeletePass(context.Context, *Pass) (*emptypb.Empty, error)
	ListPassesByPassProject(*ListPassesByPassProjectRequest, Raw_ListPassesByPassProjectServer) error
	ListPassesByPassTemplate(*ListPassesByPassTemplateRequest, Raw_ListPassesByPassTemplateServer) error
}

// UnimplementedRawServer should be embedded to have forward compatible implementations.
type UnimplementedRawServer struct {
}

func (UnimplementedRawServer) CreatePassProject(context.Context, *PassProject) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePassProject not implemented")
}
func (UnimplementedRawServer) UpdatePassProject(context.Context, *PassProject) (*PassProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassProject not implemented")
}
func (UnimplementedRawServer) GetPassProject(context.Context, *io.Id) (*PassProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassProject not implemented")
}
func (UnimplementedRawServer) CopyPassProject(context.Context, *PassProjectCopyRequest) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyPassProject not implemented")
}
func (UnimplementedRawServer) DeletePassProject(context.Context, *io.Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassProject not implemented")
}
func (UnimplementedRawServer) CreatePass(context.Context, *Pass) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePass not implemented")
}
func (UnimplementedRawServer) UpdatePass(context.Context, *Pass) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePass not implemented")
}
func (UnimplementedRawServer) StreamPassUpdates(Raw_StreamPassUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPassUpdates not implemented")
}
func (UnimplementedRawServer) GetPassById(context.Context, *io.Id) (*Pass, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassById not implemented")
}
func (UnimplementedRawServer) GetPassByExternalId(context.Context, *PassRecordByExternalIdRequest) (*Pass, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassByExternalId not implemented")
}
func (UnimplementedRawServer) DeletePass(context.Context, *Pass) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePass not implemented")
}
func (UnimplementedRawServer) ListPassesByPassProject(*ListPassesByPassProjectRequest, Raw_ListPassesByPassProjectServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPassesByPassProject not implemented")
}
func (UnimplementedRawServer) ListPassesByPassTemplate(*ListPassesByPassTemplateRequest, Raw_ListPassesByPassTemplateServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPassesByPassTemplate not implemented")
}

// UnsafeRawServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RawServer will
// result in compilation errors.
type UnsafeRawServer interface {
	mustEmbedUnimplementedRawServer()
}

func RegisterRawServer(s grpc.ServiceRegistrar, srv RawServer) {
	s.RegisterService(&Raw_ServiceDesc, srv)
}

func _Raw_CreatePassProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawServer).CreatePassProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raw.Raw/createPassProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawServer).CreatePassProject(ctx, req.(*PassProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raw_UpdatePassProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassProject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawServer).UpdatePassProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raw.Raw/updatePassProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawServer).UpdatePassProject(ctx, req.(*PassProject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raw_GetPassProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawServer).GetPassProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raw.Raw/getPassProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawServer).GetPassProject(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raw_CopyPassProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassProjectCopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawServer).CopyPassProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raw.Raw/copyPassProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawServer).CopyPassProject(ctx, req.(*PassProjectCopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raw_DeletePassProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawServer).DeletePassProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raw.Raw/deletePassProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawServer).DeletePassProject(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raw_CreatePass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawServer).CreatePass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raw.Raw/createPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawServer).CreatePass(ctx, req.(*Pass))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raw_UpdatePass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawServer).UpdatePass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raw.Raw/updatePass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawServer).UpdatePass(ctx, req.(*Pass))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raw_StreamPassUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RawServer).StreamPassUpdates(&rawStreamPassUpdatesServer{stream})
}

type Raw_StreamPassUpdatesServer interface {
	Send(*io.Id) error
	Recv() (*Pass, error)
	grpc.ServerStream
}

type rawStreamPassUpdatesServer struct {
	grpc.ServerStream
}

func (x *rawStreamPassUpdatesServer) Send(m *io.Id) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rawStreamPassUpdatesServer) Recv() (*Pass, error) {
	m := new(Pass)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Raw_GetPassById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawServer).GetPassById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raw.Raw/getPassById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawServer).GetPassById(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raw_GetPassByExternalId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassRecordByExternalIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawServer).GetPassByExternalId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raw.Raw/getPassByExternalId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawServer).GetPassByExternalId(ctx, req.(*PassRecordByExternalIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raw_DeletePass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawServer).DeletePass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raw.Raw/deletePass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawServer).DeletePass(ctx, req.(*Pass))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raw_ListPassesByPassProject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPassesByPassProjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RawServer).ListPassesByPassProject(m, &rawListPassesByPassProjectServer{stream})
}

type Raw_ListPassesByPassProjectServer interface {
	Send(*Pass) error
	grpc.ServerStream
}

type rawListPassesByPassProjectServer struct {
	grpc.ServerStream
}

func (x *rawListPassesByPassProjectServer) Send(m *Pass) error {
	return x.ServerStream.SendMsg(m)
}

func _Raw_ListPassesByPassTemplate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPassesByPassTemplateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RawServer).ListPassesByPassTemplate(m, &rawListPassesByPassTemplateServer{stream})
}

type Raw_ListPassesByPassTemplateServer interface {
	Send(*Pass) error
	grpc.ServerStream
}

type rawListPassesByPassTemplateServer struct {
	grpc.ServerStream
}

func (x *rawListPassesByPassTemplateServer) Send(m *Pass) error {
	return x.ServerStream.SendMsg(m)
}

// Raw_ServiceDesc is the grpc.ServiceDesc for Raw service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Raw_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raw.Raw",
	HandlerType: (*RawServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createPassProject",
			Handler:    _Raw_CreatePassProject_Handler,
		},
		{
			MethodName: "updatePassProject",
			Handler:    _Raw_UpdatePassProject_Handler,
		},
		{
			MethodName: "getPassProject",
			Handler:    _Raw_GetPassProject_Handler,
		},
		{
			MethodName: "copyPassProject",
			Handler:    _Raw_CopyPassProject_Handler,
		},
		{
			MethodName: "deletePassProject",
			Handler:    _Raw_DeletePassProject_Handler,
		},
		{
			MethodName: "createPass",
			Handler:    _Raw_CreatePass_Handler,
		},
		{
			MethodName: "updatePass",
			Handler:    _Raw_UpdatePass_Handler,
		},
		{
			MethodName: "getPassById",
			Handler:    _Raw_GetPassById_Handler,
		},
		{
			MethodName: "getPassByExternalId",
			Handler:    _Raw_GetPassByExternalId_Handler,
		},
		{
			MethodName: "deletePass",
			Handler:    _Raw_DeletePass_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "streamPassUpdates",
			Handler:       _Raw_StreamPassUpdates_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "listPassesByPassProject",
			Handler:       _Raw_ListPassesByPassProject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listPassesByPassTemplate",
			Handler:       _Raw_ListPassesByPassTemplate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/raw/a_rpc.proto",
}
