// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: io/core/a_rpc_others.proto

package io

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	CreateUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*NewUserResponse, error)
	NewUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*JWT, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*Boolean, error)
	ResendVerificationEmail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Boolean, error)
	GetUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserResponse, error)
	Login(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*JWT, error)
	ResetPassword(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendPasswordResetLink(ctx context.Context, in *Username, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangePassword(ctx context.Context, in *PasswordResetInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangeEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ConfirmEmailChange(ctx context.Context, in *ConfirmEmailChangeInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCompanyName(ctx context.Context, in *CompanyName, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProjectsForUserQueryDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Users_GetProjectsForUserQueryDeprecatedClient, error)
	GetProjectsQueryDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Users_GetProjectsQueryDeprecatedClient, error)
	GetProjectsForUserQuery(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Users_GetProjectsForUserQueryClient, error)
	GetProjectsQuery(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Users_GetProjectsQueryClient, error)
	GetProjectByUuid(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Project, error)
	GetProjectAndTemplateByShortCode(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ProjectByShortCodeResult, error)
	GetProjectsForUser(ctx context.Context, in *ProjectStatusFilter, opts ...grpc.CallOption) (Users_GetProjectsForUserClient, error)
	GetProjects(ctx context.Context, in *ProjectStatusFilter, opts ...grpc.CallOption) (Users_GetProjectsClient, error)
	GetScannerConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ScannerConfiguration, error)
	CreateScannerConfig(ctx context.Context, in *ScannerConfiguration, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateScannerConfig(ctx context.Context, in *ScannerConfiguration, opts ...grpc.CallOption) (*ScannerConfiguration, error)
	// Creates a new oauth2 resource, the returned id is NOT the access token used to make requests on the users behalf.
	CreateAuthorizationResource(ctx context.Context, in *OAuth2AuthorizationRequest, opts ...grpc.CallOption) (*Id, error)
	DeleteAuthorizationResource(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) CreateUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*NewUserResponse, error) {
	out := new(NewUserResponse)
	err := c.cc.Invoke(ctx, "/io.Users/createUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) NewUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*JWT, error) {
	out := new(JWT)
	err := c.cc.Invoke(ctx, "/io.Users/newUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/io.Users/verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ResendVerificationEmail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/io.Users/resendVerificationEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/io.Users/getUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Login(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*JWT, error) {
	out := new(JWT)
	err := c.cc.Invoke(ctx, "/io.Users/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ResetPassword(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.Users/resetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) SendPasswordResetLink(ctx context.Context, in *Username, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.Users/sendPasswordResetLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ChangePassword(ctx context.Context, in *PasswordResetInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.Users/changePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ChangeEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.Users/changeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ConfirmEmailChange(ctx context.Context, in *ConfirmEmailChangeInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.Users/confirmEmailChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateCompanyName(ctx context.Context, in *CompanyName, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.Users/updateCompanyName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetProjectsForUserQueryDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Users_GetProjectsForUserQueryDeprecatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Users_ServiceDesc.Streams[0], "/io.Users/getProjectsForUserQueryDeprecated", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersGetProjectsForUserQueryDeprecatedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Users_GetProjectsForUserQueryDeprecatedClient interface {
	Recv() (*Project, error)
	grpc.ClientStream
}

type usersGetProjectsForUserQueryDeprecatedClient struct {
	grpc.ClientStream
}

func (x *usersGetProjectsForUserQueryDeprecatedClient) Recv() (*Project, error) {
	m := new(Project)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersClient) GetProjectsQueryDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (Users_GetProjectsQueryDeprecatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Users_ServiceDesc.Streams[1], "/io.Users/getProjectsQueryDeprecated", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersGetProjectsQueryDeprecatedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Users_GetProjectsQueryDeprecatedClient interface {
	Recv() (*Project, error)
	grpc.ClientStream
}

type usersGetProjectsQueryDeprecatedClient struct {
	grpc.ClientStream
}

func (x *usersGetProjectsQueryDeprecatedClient) Recv() (*Project, error) {
	m := new(Project)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersClient) GetProjectsForUserQuery(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Users_GetProjectsForUserQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Users_ServiceDesc.Streams[2], "/io.Users/getProjectsForUserQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersGetProjectsForUserQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Users_GetProjectsForUserQueryClient interface {
	Recv() (*Project, error)
	grpc.ClientStream
}

type usersGetProjectsForUserQueryClient struct {
	grpc.ClientStream
}

func (x *usersGetProjectsForUserQueryClient) Recv() (*Project, error) {
	m := new(Project)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersClient) GetProjectsQuery(ctx context.Context, in *Filters, opts ...grpc.CallOption) (Users_GetProjectsQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Users_ServiceDesc.Streams[3], "/io.Users/getProjectsQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersGetProjectsQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Users_GetProjectsQueryClient interface {
	Recv() (*Project, error)
	grpc.ClientStream
}

type usersGetProjectsQueryClient struct {
	grpc.ClientStream
}

func (x *usersGetProjectsQueryClient) Recv() (*Project, error) {
	m := new(Project)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersClient) GetProjectByUuid(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/io.Users/getProjectByUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetProjectAndTemplateByShortCode(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ProjectByShortCodeResult, error) {
	out := new(ProjectByShortCodeResult)
	err := c.cc.Invoke(ctx, "/io.Users/getProjectAndTemplateByShortCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetProjectsForUser(ctx context.Context, in *ProjectStatusFilter, opts ...grpc.CallOption) (Users_GetProjectsForUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &Users_ServiceDesc.Streams[4], "/io.Users/getProjectsForUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersGetProjectsForUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Users_GetProjectsForUserClient interface {
	Recv() (*Project, error)
	grpc.ClientStream
}

type usersGetProjectsForUserClient struct {
	grpc.ClientStream
}

func (x *usersGetProjectsForUserClient) Recv() (*Project, error) {
	m := new(Project)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersClient) GetProjects(ctx context.Context, in *ProjectStatusFilter, opts ...grpc.CallOption) (Users_GetProjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Users_ServiceDesc.Streams[5], "/io.Users/getProjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersGetProjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Users_GetProjectsClient interface {
	Recv() (*Project, error)
	grpc.ClientStream
}

type usersGetProjectsClient struct {
	grpc.ClientStream
}

func (x *usersGetProjectsClient) Recv() (*Project, error) {
	m := new(Project)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersClient) GetScannerConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ScannerConfiguration, error) {
	out := new(ScannerConfiguration)
	err := c.cc.Invoke(ctx, "/io.Users/getScannerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) CreateScannerConfig(ctx context.Context, in *ScannerConfiguration, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.Users/createScannerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateScannerConfig(ctx context.Context, in *ScannerConfiguration, opts ...grpc.CallOption) (*ScannerConfiguration, error) {
	out := new(ScannerConfiguration)
	err := c.cc.Invoke(ctx, "/io.Users/updateScannerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) CreateAuthorizationResource(ctx context.Context, in *OAuth2AuthorizationRequest, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Users/createAuthorizationResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) DeleteAuthorizationResource(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.Users/deleteAuthorizationResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.Users/deleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations should embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	CreateUser(context.Context, *NewUser) (*NewUserResponse, error)
	NewUser(context.Context, *NewUser) (*JWT, error)
	Verify(context.Context, *VerifyRequest) (*Boolean, error)
	ResendVerificationEmail(context.Context, *emptypb.Empty) (*Boolean, error)
	GetUser(context.Context, *emptypb.Empty) (*GetUserResponse, error)
	Login(context.Context, *Credentials) (*JWT, error)
	ResetPassword(context.Context, *Credentials) (*emptypb.Empty, error)
	SendPasswordResetLink(context.Context, *Username) (*emptypb.Empty, error)
	ChangePassword(context.Context, *PasswordResetInput) (*emptypb.Empty, error)
	ChangeEmail(context.Context, *Email) (*emptypb.Empty, error)
	ConfirmEmailChange(context.Context, *ConfirmEmailChangeInput) (*emptypb.Empty, error)
	UpdateCompanyName(context.Context, *CompanyName) (*emptypb.Empty, error)
	GetProjectsForUserQueryDeprecated(*Pagination, Users_GetProjectsForUserQueryDeprecatedServer) error
	GetProjectsQueryDeprecated(*Pagination, Users_GetProjectsQueryDeprecatedServer) error
	GetProjectsForUserQuery(*Filters, Users_GetProjectsForUserQueryServer) error
	GetProjectsQuery(*Filters, Users_GetProjectsQueryServer) error
	GetProjectByUuid(context.Context, *Id) (*Project, error)
	GetProjectAndTemplateByShortCode(context.Context, *Id) (*ProjectByShortCodeResult, error)
	GetProjectsForUser(*ProjectStatusFilter, Users_GetProjectsForUserServer) error
	GetProjects(*ProjectStatusFilter, Users_GetProjectsServer) error
	GetScannerConfig(context.Context, *emptypb.Empty) (*ScannerConfiguration, error)
	CreateScannerConfig(context.Context, *ScannerConfiguration) (*emptypb.Empty, error)
	UpdateScannerConfig(context.Context, *ScannerConfiguration) (*ScannerConfiguration, error)
	// Creates a new oauth2 resource, the returned id is NOT the access token used to make requests on the users behalf.
	CreateAuthorizationResource(context.Context, *OAuth2AuthorizationRequest) (*Id, error)
	DeleteAuthorizationResource(context.Context, *Id) (*emptypb.Empty, error)
	DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error)
}

// UnimplementedUsersServer should be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) CreateUser(context.Context, *NewUser) (*NewUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersServer) NewUser(context.Context, *NewUser) (*JWT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewUser not implemented")
}
func (UnimplementedUsersServer) Verify(context.Context, *VerifyRequest) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedUsersServer) ResendVerificationEmail(context.Context, *emptypb.Empty) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendVerificationEmail not implemented")
}
func (UnimplementedUsersServer) GetUser(context.Context, *emptypb.Empty) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUsersServer) Login(context.Context, *Credentials) (*JWT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUsersServer) ResetPassword(context.Context, *Credentials) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUsersServer) SendPasswordResetLink(context.Context, *Username) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPasswordResetLink not implemented")
}
func (UnimplementedUsersServer) ChangePassword(context.Context, *PasswordResetInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUsersServer) ChangeEmail(context.Context, *Email) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmail not implemented")
}
func (UnimplementedUsersServer) ConfirmEmailChange(context.Context, *ConfirmEmailChangeInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmEmailChange not implemented")
}
func (UnimplementedUsersServer) UpdateCompanyName(context.Context, *CompanyName) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyName not implemented")
}
func (UnimplementedUsersServer) GetProjectsForUserQueryDeprecated(*Pagination, Users_GetProjectsForUserQueryDeprecatedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProjectsForUserQueryDeprecated not implemented")
}
func (UnimplementedUsersServer) GetProjectsQueryDeprecated(*Pagination, Users_GetProjectsQueryDeprecatedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProjectsQueryDeprecated not implemented")
}
func (UnimplementedUsersServer) GetProjectsForUserQuery(*Filters, Users_GetProjectsForUserQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProjectsForUserQuery not implemented")
}
func (UnimplementedUsersServer) GetProjectsQuery(*Filters, Users_GetProjectsQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProjectsQuery not implemented")
}
func (UnimplementedUsersServer) GetProjectByUuid(context.Context, *Id) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByUuid not implemented")
}
func (UnimplementedUsersServer) GetProjectAndTemplateByShortCode(context.Context, *Id) (*ProjectByShortCodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectAndTemplateByShortCode not implemented")
}
func (UnimplementedUsersServer) GetProjectsForUser(*ProjectStatusFilter, Users_GetProjectsForUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProjectsForUser not implemented")
}
func (UnimplementedUsersServer) GetProjects(*ProjectStatusFilter, Users_GetProjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProjects not implemented")
}
func (UnimplementedUsersServer) GetScannerConfig(context.Context, *emptypb.Empty) (*ScannerConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScannerConfig not implemented")
}
func (UnimplementedUsersServer) CreateScannerConfig(context.Context, *ScannerConfiguration) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScannerConfig not implemented")
}
func (UnimplementedUsersServer) UpdateScannerConfig(context.Context, *ScannerConfiguration) (*ScannerConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScannerConfig not implemented")
}
func (UnimplementedUsersServer) CreateAuthorizationResource(context.Context, *OAuth2AuthorizationRequest) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthorizationResource not implemented")
}
func (UnimplementedUsersServer) DeleteAuthorizationResource(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthorizationResource not implemented")
}
func (UnimplementedUsersServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/createUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateUser(ctx, req.(*NewUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_NewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).NewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/newUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).NewUser(ctx, req.(*NewUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ResendVerificationEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ResendVerificationEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/resendVerificationEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ResendVerificationEmail(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/getUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Login(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/resetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ResetPassword(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_SendPasswordResetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).SendPasswordResetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/sendPasswordResetLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).SendPasswordResetLink(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordResetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/changePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ChangePassword(ctx, req.(*PasswordResetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/changeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ChangeEmail(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ConfirmEmailChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmEmailChangeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ConfirmEmailChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/confirmEmailChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ConfirmEmailChange(ctx, req.(*ConfirmEmailChangeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateCompanyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateCompanyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/updateCompanyName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateCompanyName(ctx, req.(*CompanyName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetProjectsForUserQueryDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServer).GetProjectsForUserQueryDeprecated(m, &usersGetProjectsForUserQueryDeprecatedServer{stream})
}

type Users_GetProjectsForUserQueryDeprecatedServer interface {
	Send(*Project) error
	grpc.ServerStream
}

type usersGetProjectsForUserQueryDeprecatedServer struct {
	grpc.ServerStream
}

func (x *usersGetProjectsForUserQueryDeprecatedServer) Send(m *Project) error {
	return x.ServerStream.SendMsg(m)
}

func _Users_GetProjectsQueryDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServer).GetProjectsQueryDeprecated(m, &usersGetProjectsQueryDeprecatedServer{stream})
}

type Users_GetProjectsQueryDeprecatedServer interface {
	Send(*Project) error
	grpc.ServerStream
}

type usersGetProjectsQueryDeprecatedServer struct {
	grpc.ServerStream
}

func (x *usersGetProjectsQueryDeprecatedServer) Send(m *Project) error {
	return x.ServerStream.SendMsg(m)
}

func _Users_GetProjectsForUserQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServer).GetProjectsForUserQuery(m, &usersGetProjectsForUserQueryServer{stream})
}

type Users_GetProjectsForUserQueryServer interface {
	Send(*Project) error
	grpc.ServerStream
}

type usersGetProjectsForUserQueryServer struct {
	grpc.ServerStream
}

func (x *usersGetProjectsForUserQueryServer) Send(m *Project) error {
	return x.ServerStream.SendMsg(m)
}

func _Users_GetProjectsQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServer).GetProjectsQuery(m, &usersGetProjectsQueryServer{stream})
}

type Users_GetProjectsQueryServer interface {
	Send(*Project) error
	grpc.ServerStream
}

type usersGetProjectsQueryServer struct {
	grpc.ServerStream
}

func (x *usersGetProjectsQueryServer) Send(m *Project) error {
	return x.ServerStream.SendMsg(m)
}

func _Users_GetProjectByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetProjectByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/getProjectByUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetProjectByUuid(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetProjectAndTemplateByShortCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetProjectAndTemplateByShortCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/getProjectAndTemplateByShortCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetProjectAndTemplateByShortCode(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetProjectsForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProjectStatusFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServer).GetProjectsForUser(m, &usersGetProjectsForUserServer{stream})
}

type Users_GetProjectsForUserServer interface {
	Send(*Project) error
	grpc.ServerStream
}

type usersGetProjectsForUserServer struct {
	grpc.ServerStream
}

func (x *usersGetProjectsForUserServer) Send(m *Project) error {
	return x.ServerStream.SendMsg(m)
}

func _Users_GetProjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProjectStatusFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServer).GetProjects(m, &usersGetProjectsServer{stream})
}

type Users_GetProjectsServer interface {
	Send(*Project) error
	grpc.ServerStream
}

type usersGetProjectsServer struct {
	grpc.ServerStream
}

func (x *usersGetProjectsServer) Send(m *Project) error {
	return x.ServerStream.SendMsg(m)
}

func _Users_GetScannerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetScannerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/getScannerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetScannerConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_CreateScannerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScannerConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateScannerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/createScannerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateScannerConfig(ctx, req.(*ScannerConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateScannerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScannerConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateScannerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/updateScannerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateScannerConfig(ctx, req.(*ScannerConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_CreateAuthorizationResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuth2AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateAuthorizationResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/createAuthorizationResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateAuthorizationResource(ctx, req.(*OAuth2AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_DeleteAuthorizationResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DeleteAuthorizationResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/deleteAuthorizationResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DeleteAuthorizationResource(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Users/deleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createUser",
			Handler:    _Users_CreateUser_Handler,
		},
		{
			MethodName: "newUser",
			Handler:    _Users_NewUser_Handler,
		},
		{
			MethodName: "verify",
			Handler:    _Users_Verify_Handler,
		},
		{
			MethodName: "resendVerificationEmail",
			Handler:    _Users_ResendVerificationEmail_Handler,
		},
		{
			MethodName: "getUser",
			Handler:    _Users_GetUser_Handler,
		},
		{
			MethodName: "login",
			Handler:    _Users_Login_Handler,
		},
		{
			MethodName: "resetPassword",
			Handler:    _Users_ResetPassword_Handler,
		},
		{
			MethodName: "sendPasswordResetLink",
			Handler:    _Users_SendPasswordResetLink_Handler,
		},
		{
			MethodName: "changePassword",
			Handler:    _Users_ChangePassword_Handler,
		},
		{
			MethodName: "changeEmail",
			Handler:    _Users_ChangeEmail_Handler,
		},
		{
			MethodName: "confirmEmailChange",
			Handler:    _Users_ConfirmEmailChange_Handler,
		},
		{
			MethodName: "updateCompanyName",
			Handler:    _Users_UpdateCompanyName_Handler,
		},
		{
			MethodName: "getProjectByUuid",
			Handler:    _Users_GetProjectByUuid_Handler,
		},
		{
			MethodName: "getProjectAndTemplateByShortCode",
			Handler:    _Users_GetProjectAndTemplateByShortCode_Handler,
		},
		{
			MethodName: "getScannerConfig",
			Handler:    _Users_GetScannerConfig_Handler,
		},
		{
			MethodName: "createScannerConfig",
			Handler:    _Users_CreateScannerConfig_Handler,
		},
		{
			MethodName: "updateScannerConfig",
			Handler:    _Users_UpdateScannerConfig_Handler,
		},
		{
			MethodName: "createAuthorizationResource",
			Handler:    _Users_CreateAuthorizationResource_Handler,
		},
		{
			MethodName: "deleteAuthorizationResource",
			Handler:    _Users_DeleteAuthorizationResource_Handler,
		},
		{
			MethodName: "deleteAccount",
			Handler:    _Users_DeleteAccount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getProjectsForUserQueryDeprecated",
			Handler:       _Users_GetProjectsForUserQueryDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getProjectsQueryDeprecated",
			Handler:       _Users_GetProjectsQueryDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getProjectsForUserQuery",
			Handler:       _Users_GetProjectsForUserQuery_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getProjectsQuery",
			Handler:       _Users_GetProjectsQuery_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getProjectsForUser",
			Handler:       _Users_GetProjectsForUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getProjects",
			Handler:       _Users_GetProjects_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/core/a_rpc_others.proto",
}

// IntegrationsClient is the client API for Integrations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationsClient interface {
	CreateIntegrations(ctx context.Context, in *IntegrationConfigs, opts ...grpc.CallOption) (*Id, error)
	GetIntegrations(ctx context.Context, in *ProtocolIdInput, opts ...grpc.CallOption) (*IntegrationConfigs, error)
	UpdateIntegrations(ctx context.Context, in *IntegrationConfigs, opts ...grpc.CallOption) (*Id, error)
	DeleteIntegrations(ctx context.Context, in *ProtocolIdInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateSinkSubscription(ctx context.Context, in *SinkSubscription, opts ...grpc.CallOption) (*Id, error)
	GetSinkSubscription(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SinkSubscription, error)
	ListSinkSubscriptionsDeprecated(ctx context.Context, in *ListRequestDeprecated, opts ...grpc.CallOption) (Integrations_ListSinkSubscriptionsDeprecatedClient, error)
	ListSinkSubscriptions(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Integrations_ListSinkSubscriptionsClient, error)
	UpdateSinkSubscription(ctx context.Context, in *SinkSubscription, opts ...grpc.CallOption) (*Id, error)
	DeleteSinkSubscription(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSampleSubscriptionEvent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SinkSubscription, error)
	CallDynamicApi(ctx context.Context, in *DynamicApiInput, opts ...grpc.CallOption) (*DynamicApiResponse, error)
}

type integrationsClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationsClient(cc grpc.ClientConnInterface) IntegrationsClient {
	return &integrationsClient{cc}
}

func (c *integrationsClient) CreateIntegrations(ctx context.Context, in *IntegrationConfigs, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Integrations/createIntegrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) GetIntegrations(ctx context.Context, in *ProtocolIdInput, opts ...grpc.CallOption) (*IntegrationConfigs, error) {
	out := new(IntegrationConfigs)
	err := c.cc.Invoke(ctx, "/io.Integrations/getIntegrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) UpdateIntegrations(ctx context.Context, in *IntegrationConfigs, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Integrations/updateIntegrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) DeleteIntegrations(ctx context.Context, in *ProtocolIdInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.Integrations/deleteIntegrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) CreateSinkSubscription(ctx context.Context, in *SinkSubscription, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Integrations/createSinkSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) GetSinkSubscription(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SinkSubscription, error) {
	out := new(SinkSubscription)
	err := c.cc.Invoke(ctx, "/io.Integrations/getSinkSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) ListSinkSubscriptionsDeprecated(ctx context.Context, in *ListRequestDeprecated, opts ...grpc.CallOption) (Integrations_ListSinkSubscriptionsDeprecatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Integrations_ServiceDesc.Streams[0], "/io.Integrations/listSinkSubscriptionsDeprecated", opts...)
	if err != nil {
		return nil, err
	}
	x := &integrationsListSinkSubscriptionsDeprecatedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Integrations_ListSinkSubscriptionsDeprecatedClient interface {
	Recv() (*SinkSubscription, error)
	grpc.ClientStream
}

type integrationsListSinkSubscriptionsDeprecatedClient struct {
	grpc.ClientStream
}

func (x *integrationsListSinkSubscriptionsDeprecatedClient) Recv() (*SinkSubscription, error) {
	m := new(SinkSubscription)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *integrationsClient) ListSinkSubscriptions(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Integrations_ListSinkSubscriptionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Integrations_ServiceDesc.Streams[1], "/io.Integrations/listSinkSubscriptions", opts...)
	if err != nil {
		return nil, err
	}
	x := &integrationsListSinkSubscriptionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Integrations_ListSinkSubscriptionsClient interface {
	Recv() (*SinkSubscription, error)
	grpc.ClientStream
}

type integrationsListSinkSubscriptionsClient struct {
	grpc.ClientStream
}

func (x *integrationsListSinkSubscriptionsClient) Recv() (*SinkSubscription, error) {
	m := new(SinkSubscription)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *integrationsClient) UpdateSinkSubscription(ctx context.Context, in *SinkSubscription, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/io.Integrations/updateSinkSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) DeleteSinkSubscription(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.Integrations/deleteSinkSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) GetSampleSubscriptionEvent(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SinkSubscription, error) {
	out := new(SinkSubscription)
	err := c.cc.Invoke(ctx, "/io.Integrations/getSampleSubscriptionEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) CallDynamicApi(ctx context.Context, in *DynamicApiInput, opts ...grpc.CallOption) (*DynamicApiResponse, error) {
	out := new(DynamicApiResponse)
	err := c.cc.Invoke(ctx, "/io.Integrations/callDynamicApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationsServer is the server API for Integrations service.
// All implementations should embed UnimplementedIntegrationsServer
// for forward compatibility
type IntegrationsServer interface {
	CreateIntegrations(context.Context, *IntegrationConfigs) (*Id, error)
	GetIntegrations(context.Context, *ProtocolIdInput) (*IntegrationConfigs, error)
	UpdateIntegrations(context.Context, *IntegrationConfigs) (*Id, error)
	DeleteIntegrations(context.Context, *ProtocolIdInput) (*emptypb.Empty, error)
	CreateSinkSubscription(context.Context, *SinkSubscription) (*Id, error)
	GetSinkSubscription(context.Context, *SubscriptionRequest) (*SinkSubscription, error)
	ListSinkSubscriptionsDeprecated(*ListRequestDeprecated, Integrations_ListSinkSubscriptionsDeprecatedServer) error
	ListSinkSubscriptions(*ListRequest, Integrations_ListSinkSubscriptionsServer) error
	UpdateSinkSubscription(context.Context, *SinkSubscription) (*Id, error)
	DeleteSinkSubscription(context.Context, *SubscriptionRequest) (*emptypb.Empty, error)
	GetSampleSubscriptionEvent(context.Context, *Id) (*SinkSubscription, error)
	CallDynamicApi(context.Context, *DynamicApiInput) (*DynamicApiResponse, error)
}

// UnimplementedIntegrationsServer should be embedded to have forward compatible implementations.
type UnimplementedIntegrationsServer struct {
}

func (UnimplementedIntegrationsServer) CreateIntegrations(context.Context, *IntegrationConfigs) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntegrations not implemented")
}
func (UnimplementedIntegrationsServer) GetIntegrations(context.Context, *ProtocolIdInput) (*IntegrationConfigs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrations not implemented")
}
func (UnimplementedIntegrationsServer) UpdateIntegrations(context.Context, *IntegrationConfigs) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIntegrations not implemented")
}
func (UnimplementedIntegrationsServer) DeleteIntegrations(context.Context, *ProtocolIdInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIntegrations not implemented")
}
func (UnimplementedIntegrationsServer) CreateSinkSubscription(context.Context, *SinkSubscription) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSinkSubscription not implemented")
}
func (UnimplementedIntegrationsServer) GetSinkSubscription(context.Context, *SubscriptionRequest) (*SinkSubscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSinkSubscription not implemented")
}
func (UnimplementedIntegrationsServer) ListSinkSubscriptionsDeprecated(*ListRequestDeprecated, Integrations_ListSinkSubscriptionsDeprecatedServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSinkSubscriptionsDeprecated not implemented")
}
func (UnimplementedIntegrationsServer) ListSinkSubscriptions(*ListRequest, Integrations_ListSinkSubscriptionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSinkSubscriptions not implemented")
}
func (UnimplementedIntegrationsServer) UpdateSinkSubscription(context.Context, *SinkSubscription) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSinkSubscription not implemented")
}
func (UnimplementedIntegrationsServer) DeleteSinkSubscription(context.Context, *SubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSinkSubscription not implemented")
}
func (UnimplementedIntegrationsServer) GetSampleSubscriptionEvent(context.Context, *Id) (*SinkSubscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleSubscriptionEvent not implemented")
}
func (UnimplementedIntegrationsServer) CallDynamicApi(context.Context, *DynamicApiInput) (*DynamicApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallDynamicApi not implemented")
}

// UnsafeIntegrationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationsServer will
// result in compilation errors.
type UnsafeIntegrationsServer interface {
	mustEmbedUnimplementedIntegrationsServer()
}

func RegisterIntegrationsServer(s grpc.ServiceRegistrar, srv IntegrationsServer) {
	s.RegisterService(&Integrations_ServiceDesc, srv)
}

func _Integrations_CreateIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationConfigs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).CreateIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Integrations/createIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).CreateIntegrations(ctx, req.(*IntegrationConfigs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_GetIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).GetIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Integrations/getIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).GetIntegrations(ctx, req.(*ProtocolIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_UpdateIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationConfigs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).UpdateIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Integrations/updateIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).UpdateIntegrations(ctx, req.(*IntegrationConfigs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_DeleteIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).DeleteIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Integrations/deleteIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).DeleteIntegrations(ctx, req.(*ProtocolIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_CreateSinkSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinkSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).CreateSinkSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Integrations/createSinkSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).CreateSinkSubscription(ctx, req.(*SinkSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_GetSinkSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).GetSinkSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Integrations/getSinkSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).GetSinkSubscription(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_ListSinkSubscriptionsDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequestDeprecated)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IntegrationsServer).ListSinkSubscriptionsDeprecated(m, &integrationsListSinkSubscriptionsDeprecatedServer{stream})
}

type Integrations_ListSinkSubscriptionsDeprecatedServer interface {
	Send(*SinkSubscription) error
	grpc.ServerStream
}

type integrationsListSinkSubscriptionsDeprecatedServer struct {
	grpc.ServerStream
}

func (x *integrationsListSinkSubscriptionsDeprecatedServer) Send(m *SinkSubscription) error {
	return x.ServerStream.SendMsg(m)
}

func _Integrations_ListSinkSubscriptions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IntegrationsServer).ListSinkSubscriptions(m, &integrationsListSinkSubscriptionsServer{stream})
}

type Integrations_ListSinkSubscriptionsServer interface {
	Send(*SinkSubscription) error
	grpc.ServerStream
}

type integrationsListSinkSubscriptionsServer struct {
	grpc.ServerStream
}

func (x *integrationsListSinkSubscriptionsServer) Send(m *SinkSubscription) error {
	return x.ServerStream.SendMsg(m)
}

func _Integrations_UpdateSinkSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinkSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).UpdateSinkSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Integrations/updateSinkSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).UpdateSinkSubscription(ctx, req.(*SinkSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_DeleteSinkSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).DeleteSinkSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Integrations/deleteSinkSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).DeleteSinkSubscription(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_GetSampleSubscriptionEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).GetSampleSubscriptionEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Integrations/getSampleSubscriptionEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).GetSampleSubscriptionEvent(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_CallDynamicApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynamicApiInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).CallDynamicApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.Integrations/callDynamicApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).CallDynamicApi(ctx, req.(*DynamicApiInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Integrations_ServiceDesc is the grpc.ServiceDesc for Integrations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Integrations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.Integrations",
	HandlerType: (*IntegrationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createIntegrations",
			Handler:    _Integrations_CreateIntegrations_Handler,
		},
		{
			MethodName: "getIntegrations",
			Handler:    _Integrations_GetIntegrations_Handler,
		},
		{
			MethodName: "updateIntegrations",
			Handler:    _Integrations_UpdateIntegrations_Handler,
		},
		{
			MethodName: "deleteIntegrations",
			Handler:    _Integrations_DeleteIntegrations_Handler,
		},
		{
			MethodName: "createSinkSubscription",
			Handler:    _Integrations_CreateSinkSubscription_Handler,
		},
		{
			MethodName: "getSinkSubscription",
			Handler:    _Integrations_GetSinkSubscription_Handler,
		},
		{
			MethodName: "updateSinkSubscription",
			Handler:    _Integrations_UpdateSinkSubscription_Handler,
		},
		{
			MethodName: "deleteSinkSubscription",
			Handler:    _Integrations_DeleteSinkSubscription_Handler,
		},
		{
			MethodName: "getSampleSubscriptionEvent",
			Handler:    _Integrations_GetSampleSubscriptionEvent_Handler,
		},
		{
			MethodName: "callDynamicApi",
			Handler:    _Integrations_CallDynamicApi_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listSinkSubscriptionsDeprecated",
			Handler:       _Integrations_ListSinkSubscriptionsDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listSinkSubscriptions",
			Handler:       _Integrations_ListSinkSubscriptions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/core/a_rpc_others.proto",
}
