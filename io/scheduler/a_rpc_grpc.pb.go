// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: io/scheduler/a_rpc.proto

package scheduler

import (
	context "context"

	ct "github.com/PassKit/passkit-golang-grpc-sdk/ct"
	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerClient interface {
	CreateSchedulingJob(ctx context.Context, in *ct.SchedulingJob, opts ...grpc.CallOption) (*ct.SchedulingJobResponse, error)
	GetSchedulingJob(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*ct.SchedulingJob, error)
	UpdateSchedulingJob(ctx context.Context, in *ct.SchedulingJob, opts ...grpc.CallOption) (*ct.SchedulingJobResponse, error)
	PatchSchedulingJob(ctx context.Context, in *ct.SchedulingJob, opts ...grpc.CallOption) (*ct.SchedulingJobResponse, error)
	DeleteSchedulingJob(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSchedulingJobHistory(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*ct.JobHistory, error)
	ListSchedulingJobHistories(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Scheduler_ListSchedulingJobHistoriesClient, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) CreateSchedulingJob(ctx context.Context, in *ct.SchedulingJob, opts ...grpc.CallOption) (*ct.SchedulingJobResponse, error) {
	out := new(ct.SchedulingJobResponse)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/createSchedulingJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetSchedulingJob(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*ct.SchedulingJob, error) {
	out := new(ct.SchedulingJob)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/getSchedulingJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) UpdateSchedulingJob(ctx context.Context, in *ct.SchedulingJob, opts ...grpc.CallOption) (*ct.SchedulingJobResponse, error) {
	out := new(ct.SchedulingJobResponse)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/updateSchedulingJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) PatchSchedulingJob(ctx context.Context, in *ct.SchedulingJob, opts ...grpc.CallOption) (*ct.SchedulingJobResponse, error) {
	out := new(ct.SchedulingJobResponse)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/patchSchedulingJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DeleteSchedulingJob(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/deleteSchedulingJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetSchedulingJobHistory(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*ct.JobHistory, error) {
	out := new(ct.JobHistory)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/getSchedulingJobHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ListSchedulingJobHistories(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Scheduler_ListSchedulingJobHistoriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scheduler_ServiceDesc.Streams[0], "/scheduler.Scheduler/listSchedulingJobHistories", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerListSchedulingJobHistoriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_ListSchedulingJobHistoriesClient interface {
	Recv() (*ct.JobHistory, error)
	grpc.ClientStream
}

type schedulerListSchedulingJobHistoriesClient struct {
	grpc.ClientStream
}

func (x *schedulerListSchedulingJobHistoriesClient) Recv() (*ct.JobHistory, error) {
	m := new(ct.JobHistory)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SchedulerServer is the server API for Scheduler service.
// All implementations should embed UnimplementedSchedulerServer
// for forward compatibility
type SchedulerServer interface {
	CreateSchedulingJob(context.Context, *ct.SchedulingJob) (*ct.SchedulingJobResponse, error)
	GetSchedulingJob(context.Context, *io.Id) (*ct.SchedulingJob, error)
	UpdateSchedulingJob(context.Context, *ct.SchedulingJob) (*ct.SchedulingJobResponse, error)
	PatchSchedulingJob(context.Context, *ct.SchedulingJob) (*ct.SchedulingJobResponse, error)
	DeleteSchedulingJob(context.Context, *io.Id) (*emptypb.Empty, error)
	GetSchedulingJobHistory(context.Context, *io.Id) (*ct.JobHistory, error)
	ListSchedulingJobHistories(*ListRequest, Scheduler_ListSchedulingJobHistoriesServer) error
}

// UnimplementedSchedulerServer should be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (UnimplementedSchedulerServer) CreateSchedulingJob(context.Context, *ct.SchedulingJob) (*ct.SchedulingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchedulingJob not implemented")
}
func (UnimplementedSchedulerServer) GetSchedulingJob(context.Context, *io.Id) (*ct.SchedulingJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulingJob not implemented")
}
func (UnimplementedSchedulerServer) UpdateSchedulingJob(context.Context, *ct.SchedulingJob) (*ct.SchedulingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchedulingJob not implemented")
}
func (UnimplementedSchedulerServer) PatchSchedulingJob(context.Context, *ct.SchedulingJob) (*ct.SchedulingJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchSchedulingJob not implemented")
}
func (UnimplementedSchedulerServer) DeleteSchedulingJob(context.Context, *io.Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchedulingJob not implemented")
}
func (UnimplementedSchedulerServer) GetSchedulingJobHistory(context.Context, *io.Id) (*ct.JobHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulingJobHistory not implemented")
}
func (UnimplementedSchedulerServer) ListSchedulingJobHistories(*ListRequest, Scheduler_ListSchedulingJobHistoriesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSchedulingJobHistories not implemented")
}

// UnsafeSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServer will
// result in compilation errors.
type UnsafeSchedulerServer interface {
	mustEmbedUnimplementedSchedulerServer()
}

func RegisterSchedulerServer(s grpc.ServiceRegistrar, srv SchedulerServer) {
	s.RegisterService(&Scheduler_ServiceDesc, srv)
}

func _Scheduler_CreateSchedulingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ct.SchedulingJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).CreateSchedulingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/createSchedulingJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).CreateSchedulingJob(ctx, req.(*ct.SchedulingJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetSchedulingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetSchedulingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/getSchedulingJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetSchedulingJob(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_UpdateSchedulingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ct.SchedulingJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).UpdateSchedulingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/updateSchedulingJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).UpdateSchedulingJob(ctx, req.(*ct.SchedulingJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_PatchSchedulingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ct.SchedulingJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).PatchSchedulingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/patchSchedulingJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).PatchSchedulingJob(ctx, req.(*ct.SchedulingJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DeleteSchedulingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteSchedulingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/deleteSchedulingJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteSchedulingJob(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetSchedulingJobHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetSchedulingJobHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/getSchedulingJobHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetSchedulingJobHistory(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ListSchedulingJobHistories_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).ListSchedulingJobHistories(m, &schedulerListSchedulingJobHistoriesServer{stream})
}

type Scheduler_ListSchedulingJobHistoriesServer interface {
	Send(*ct.JobHistory) error
	grpc.ServerStream
}

type schedulerListSchedulingJobHistoriesServer struct {
	grpc.ServerStream
}

func (x *schedulerListSchedulingJobHistoriesServer) Send(m *ct.JobHistory) error {
	return x.ServerStream.SendMsg(m)
}

// Scheduler_ServiceDesc is the grpc.ServiceDesc for Scheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createSchedulingJob",
			Handler:    _Scheduler_CreateSchedulingJob_Handler,
		},
		{
			MethodName: "getSchedulingJob",
			Handler:    _Scheduler_GetSchedulingJob_Handler,
		},
		{
			MethodName: "updateSchedulingJob",
			Handler:    _Scheduler_UpdateSchedulingJob_Handler,
		},
		{
			MethodName: "patchSchedulingJob",
			Handler:    _Scheduler_PatchSchedulingJob_Handler,
		},
		{
			MethodName: "deleteSchedulingJob",
			Handler:    _Scheduler_DeleteSchedulingJob_Handler,
		},
		{
			MethodName: "getSchedulingJobHistory",
			Handler:    _Scheduler_GetSchedulingJobHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listSchedulingJobHistories",
			Handler:       _Scheduler_ListSchedulingJobHistories_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/scheduler/a_rpc.proto",
}
